
#include <functional>
#include <string>

namespace isl {
inline namespace noexceptions {

class ctx {
  isl_ctx *ptr;
public:
  /* implicit */ ctx(isl_ctx *ctx)
      : ptr(ctx) {}
  isl_ctx *release() {
    auto tmp = ptr;
    ptr = nullptr;
    return tmp;
  }
  isl_ctx *get() {
    return ptr;
  }
};

class quota_ignore;
class quota_true;
class quota_false;

/* Interface of an error handler which is called in case of a quota error.
 */
class quota {
public:
  static quota_ignore ignore;
  static quota_true ret_true;
  static quota_false ret_false;

  /* Report an error for a function with return type 'bool'.
   *
   * The value returned by this function is forwarded as return value of the
   * function triggering the error.
   */
  virtual bool report_bool() = 0;
};

/* Indicate that when a quota-error occurs, the value that is returned
 * by the function triggering the error is ignored.
 */
class quota_ignore : public quota {
public:
  virtual bool report_bool() override { return true; }
};

/* Indicate that when a quota-error occurs, the value that is returned
 * by the function triggering the error is "true".
 */
class quota_true : public quota {
public:
  virtual bool report_bool() override { return true; }
};

/* Indicate that when a quota-error occurs, the value that is returned
 * by the function triggering the error is "false".
 */
class quota_false : public quota {
public:
  virtual bool report_bool() override { return false; }
};

quota_ignore quota::ignore;
quota_true quota::ret_true;
quota_false quota::ret_false;

enum class dim {
  cst = isl_dim_cst,
  param = isl_dim_param,
  in = isl_dim_in,
  out = isl_dim_out,
  set = isl_dim_set,
  div = isl_dim_div,
  all = isl_dim_all
};

}
} // namespace isl
