
#include <functional>
#include <string>

namespace isl {
inline namespace noexceptions {

class ctx {
  isl_ctx *ptr;
public:
  /* implicit */ ctx(isl_ctx *ctx)
      : ptr(ctx) {}
  isl_ctx *release() {
    auto tmp = ptr;
    ptr = nullptr;
    return tmp;
  }
  isl_ctx *get() {
    return ptr;
  }
};

/* Interface of an error handler which will be called in case a quota error
 * occurs.
 */
class quota {
public:
  virtual bool report_bool() = 0;
};

/* Indicate that when a quota-error occurs, the value that is returned
 * by the boolean function will be ignored.
 */
class quota_ignore : public quota {
public:
  virtual bool report_bool() override { return true; }
};

/* Indicate that when a quota-error occurs, the value that a boolean "true"
 * should be returned to abort the program execution as quick as possible.
class quota_assume_true : public quota {
public:
  virtual bool report_bool() override { return true; }
};

/* Indicate that when a quota-error occurs, the value that a boolean "false"
 * should be returned to abort the program execution as quick as possible.
class quota_assume_false : public quota {
public:
  virtual bool report_bool() override { return false; }
};

}
} // namespace isl
