
#include <functional>
#include <string>

namespace isl {
inline namespace noexceptions {

class ctx {
  isl_ctx *ptr;
public:
  /* implicit */ ctx(isl_ctx *ctx)
      : ptr(ctx) {}
  isl_ctx *release() {
    auto tmp = ptr;
    ptr = nullptr;
    return tmp;
  }
  isl_ctx *get() {
    return ptr;
  }
};

template<typename T>
class quota_ignore;
template<typename T>
class quota_true;
template<typename T>
class quota_false;
template<typename T>
class quota_unclear;

/* Interface of an error handler which is called in case of a quota error.
 */
template<typename T>
class quotaBase {
public:
  static quota_ignore<T> ignore;
  static quota_true<T> ret_true;
  static quota_false<T> ret_false;
  static quota_unclear<T> unclear;

  virtual ~quotaBase() = default;

  /* Report an error for a function with return type 'bool'.
   *
   * The value returned by this function is forwarded as return value of the
   * function triggering the error.
   */
  virtual bool report_bool() = 0;
};

/* Indicate that when a quota-error occurs, the value that is returned
 * by the function triggering the error is ignored.
 */
template<typename T>
class quota_ignore : public quotaBase<T> {
public:
  virtual bool report_bool() override { return true; }
};

/* Indicate that when a quota-error occurs, the value that is returned
 * by the function triggering the error is "true".
 */
template<typename T>
class quota_true : public quotaBase<T> {
public:
  virtual bool report_bool() override { return true; }
};

/* Indicate that when a quota-error occurs, the value that is returned
 * by the function triggering the error is "false".
 */
template<typename T>
class quota_false : public quotaBase<T> {
public:
  virtual bool report_bool() override { return false; }
};

/* Indicate that when a quota-error occurs, that I did not yet think about
 * this.
 */
template<typename T>
class quota_unclear : public quotaBase<T> {
public:
  virtual bool report_bool() override { return false; }
};

template<typename T>
quota_ignore<T> quotaBase<T>::ignore;
template<typename T>
quota_true<T> quotaBase<T>::ret_true;
template<typename T>
quota_false<T> quotaBase<T>::ret_false;
template<typename T>
quota_unclear<T> quotaBase<T>::unclear;

using quota = quotaBase<void>;

enum class dim {
  cst = isl_dim_cst,
  param = isl_dim_param,
  in = isl_dim_in,
  out = isl_dim_out,
  set = isl_dim_set,
  div = isl_dim_div,
  all = isl_dim_all
};

}
} // namespace isl
